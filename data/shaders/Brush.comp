#version 430 core

layout(std140, binding = 0) uniform Matrices {
	mat4 viewport;
	mat4 projection;
};

layout(std140, binding = 1) uniform BrushData {	
	vec2 position;
	vec2 tilt;
	vec4 color;
	float pressure;
	float radius;
	float hardness;
} brush_data;
uniform sampler2D brush_alpha;

layout(std140, binding = 2) uniform TileData {
	ivec2 size;
	ivec2 position;
	mat4 model;
} tile_data;

// TODO: use a textureArray and edit the texture that will be affected
layout(binding = 0, rgba8) uniform image2D tile_tex;


layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main() {
	const ivec2 tile_tex_pos = ivec2(gl_GlobalInvocationID.xy);
	const ivec2 tile_tex_size = imageSize(tile_tex);
	const vec2 pixel_pos = tile_data.position * tile_data.size + tile_tex_pos;

	float falloff =  smoothstep(brush_data.radius, 0.0, distance(pixel_pos, brush_data.position));

	vec4 pixel = imageLoad(tile_tex, tile_tex_pos);
	pixel = mix(pixel, brush_data.color, brush_data.color.a * falloff);
	imageStore(tile_tex, tile_tex_pos, pixel);
}